#+TITLE: Emacs Literate Configuration
#+AUTHOR: Justin Smestad
#+PROPERTY: header-args :tangle yes

* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:

** Table of Contents :TOC_3_gh:
- [[#configuration][Configuration]]
  - [[#identity][Identity]]
  - [[#emacs-initialization][Emacs Initialization]]
    - [[#package-sources][Package Sources]]
    - [[#use-package][use-package]]
    - [[#package-updater][Package Updater]]
    - [[#character-encoding][Character Encoding]]
    - [[#debugging-tool][Debugging Tool]]
    - [[#run-time-environment][Run-time environment]]
    - [[#tame-files-inside-of-my-emacsd-directory][Tame files inside of my ~/.emacs.d directory]]
  - [[#keybindings][Keybindings]]
    - [[#keybinding-help-menu][Keybinding help menu]]
    - [[#generalel][general.el]]
    - [[#global-keybinding-configuration-macro][Global keybinding configuration macro]]
    - [[#major-mode-keybinding-configuration-macro][Major Mode keybinding configuration macro]]
    - [[#evil-keybinding-macro-for-major-mode][Evil keybinding macro for major mode]]
  - [[#project-configuration][Project Configuration]]
    - [[#editorconfig][Editorconfig]]
    - [[#projectile][Projectile]]
    - [[#direnv][Direnv]]
  - [[#auto-completion][Auto-Completion]]
    - [[#amx][amx]]
    - [[#ivy][Ivy]]
    - [[#counsel][Counsel]]
    - [[#company][Company]]
  - [[#languages][Languages]]
    - [[#complete][Complete]]
    - [[#in-development--incomplete][In Development / Incomplete]]
  - [[#search][Search]]
    - [[#swiper][Swiper]]
    - [[#ripgrep][Ripgrep]]
  - [[#editing][Editing]]
    - [[#smartparens-fn][SmartParens Fn]]
    - [[#syntax-checking][Syntax Checking]]
    - [[#spell-checking][Spell Checking]]
  - [[#write-good][Write Good]]
  - [[#movement][Movement]]
    - [[#evil][Evil]]
    - [[#neotree][Neotree]]
  - [[#visual][Visual]]
    - [[#ui-theme-etc][UI, Theme, etc.]]
    - [[#highlight-todo--fixme-comments][Highlight TODO & FIXME comments]]
  - [[#preferences][Preferences]]
    - [[#indentation][Indentation]]
    - [[#other][Other]]
  - [[#operating-systems][Operating Systems]]
    - [[#linux][Linux]]
    - [[#macos][macOS]]
  - [[#built-in-modes-break-down][Built-in modes (Break down)]]
  - [[#tools][Tools]]
    - [[#org-mode][Org Mode]]
    - [[#pdf][PDF]]
  - [[#apps][Apps]]
    - [[#riot--matrix-client][Riot / Matrix client]]

** Identity

 #+BEGIN_SRC emacs-lisp
   (customize-set-variable 'user-full-name "Justin Smestad")
   (customize-set-variable 'user-mail-address "justin.smestad@gmail.com")
 #+END_SRC

** Emacs Initialization
*** Package Sources
 #+BEGIN_SRC emacs-lisp
   ;;; Add load path for vendor directory
   (add-to-list 'load-path "~/.emacs.d/vendor/")

   ;;; Get package repos configured
   (require 'package)
   (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
   (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
   (setq package-archive-priorities '(("org" . 3)
                                      ("melpa" . 2)
                                      ("gnu" . 1)))
 #+END_SRC

*** use-package
 All the deferred package loading is handled by the use-package project.

 #+BEGIN_SRC emacs-lisp
   (unless package--initialized
     (package-initialize))

   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))

   (setq use-package-compute-statistics t
         use-package-always-ensure t
         ;; use-package-verbose t
         use-package-minimum-reported-time 0.01)

   (eval-when-compile
     (require 'use-package))
 #+END_SRC

**** QUELPA keyword


 #+BEGIN_SRC emacs-lisp
   (use-package quelpa
     :defer t
     :custom
     (quelpa-update-melpa-p nil))

   (use-package quelpa-use-package)
   (quelpa-use-package-activate-advice)
 #+END_SRC
*** Package Updater
  Auto-update packages.
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :commands auto-package-update-now
    :requires no-littering
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-delete-old-versions t)
    (auto-package-update-hide-results t)
    (auto-package-update-prompt-before-update t)
    (apu--last-update-day-filename
     (no-littering-expand-var-file-name "auto-update-package-last-update-day")))
#+END_SRC

*** Character Encoding
  Everything in UTF-8... and I mean everything.

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))     ; pretty

  (prefer-coding-system        'utf-8)   ; pretty
  (set-terminal-coding-system  'utf-8)   ; pretty
  (set-keyboard-coding-system  'utf-8)   ; pretty
  (set-selection-coding-system 'utf-8)   ; perdy

  (setq locale-coding-system 'utf-8)     ; please
  #+END_SRC

*** Debugging Tool
  If my Emacs configuration is running a little slow, enable the benchmark-init package to see what is taking so long.
#+BEGIN_SRC emacs-lisp
  (use-package benchmark-init
    :disabled
    :config
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+END_SRC

*** Run-time environment
  Ensure the required system packages are installed, and copy over $PATH and other important environment variables.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns x))
    :config
    (setq exec-path-from-shell-arguments '("-l"))
    (exec-path-from-shell-initialize))

  (use-package use-package-ensure-system-package
      :functions use-package-ensure-system-package-exists?
      :requires (exec-path-from-shell))
#+END_SRC

*** Tame files inside of my ~/.emacs.d directory
  Save data files consistently:
    - `save-place-file'
    - `undo-tree-history-directory-alist'
    - `backup-directory-alist'
  #+BEGIN_SRC emacs-lisp
    (use-package no-littering
      :demand t
      :config
      (setq no-littering-var-directory
            (expand-file-name "var/" user-emacs-directory))
      (setq no-littering-etc-directory
            (expand-file-name "etc/" user-emacs-directory))
      (setq custom-file
            (no-littering-expand-var-file-name "custom.el")))
  #+END_SRC

** Keybindings
*** Keybinding help menu

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :defer 1
    :delight
    :init (which-key-mode)
    :custom
    (which-key-sort-order 'which-key-prefix-then-key-order)
    (which-key-sort-uppercase-first nil)
    (which-key-add-column-padding 1)
    (which-key-max-display-columns nil)
    (which-key-min-display-lines 6)
    (which-key-side-window-max-width 0.33)
    (which-key-setup-side-window-right-bottom))
#+END_SRC

*** general.el
  #+BEGIN_SRC emacs-lisp
    (use-package general
      :demand t
      :functions space-leader-def
      ;; :custom
      ;; (general-default-prefix "SPC")
      ;; (general-default-non-normal-prefix "C-SPC")
      :config
      (general-create-definer space-leader-def
        :prefix "SPC"
        :non-normal-prefix "C-SPC")
      (general-evil-setup)
      (space-leader-def
        ;; :states '(normal visual insert emacs)
        :states '(normal emacs)

        "SPC" '(counsel-M-x :which-key "M-x")
        ;; "TAB" '(switch-to-other-buffer :which-key "prev buffer")

        ;;; Help bindings
        "?" '(counsel-descbinds :which-key "Help")
        "h" '(:ignore t :which-key "Help")
        "hdf" '(counsel-describe-function :which-key "describe function")
        "hdm" '(describe-mode :which-key "describe modes") ;; TODO: https://framagit.org/steckerhalter/discover-my-major
        "hdv" '(counsel-describe-variable :which-key "describe variable")

        ;;; Buffers
        "b"   '(:ignore t :which-key "Buffers")
        "bb" '(ivy-switch-buffer :which-key "list buffers")
        "bn" '(next-buffer :which-key "next buffer")
        "bp" '(previous-buffer :which-key "prev buffer")
        "bd" '((lambda ()
                  (interactive)
                  (kill-buffer (current-buffer)))
                :which-key "close current buffer")
        "bs" '((lambda ()
                  (interactive)
                  (switch-to-buffer (get-buffer-create "*scratch*")))
                :which-key "scratch buffer")

        ;;; Files
        "f"   '(:ignore t :which-key "Files")
        "fD" '((lambda ()
                  (interactive)
                  (let ((filename (buffer-file-name))
                        (buffer (current-buffer))
                        (name (buffer-name)))
                    (if (not (and filename (file-exists-p filename)))
                        (ido-kill-buffer)
                      (when (yes-or-no-p "Are you sure you want to delete this file? ")
                        (delete-file filename t)
                        (kill-buffer buffer)
                        (message "File '%s' successfully removed" filename)))))
                :which-key "delete file and kill buffer")
        "ff" '(counsel-find-file :which-key "find file")
        "fed" '((lambda ()
                    (interactive)
                    (find-file-existing +literate-config-file))
                  :which-key "open emacs configuration")


        "d" '(:ignore t :which-key "Docs")
        "dd" '((lambda ()
                  (interactive)
                  (counsel-dash
                   (if (use-region-p)
                       (buffer-substring-no-properties (region-beginning) (region-end))
                     (substring-no-properties (or (thing-at-point 'symbol) "")))))
                :which-key "Lookup thing at point")
        "dD" '(counsel-dash :which-key "Lookup thing at point with docset")


        "g" '(:ignore t :which-key "Go to")
        "gd" '(dumb-jump-go :which-key "definition")
        "gD" '(dumb-jump-go-other-window :which-key "definition (other window)")

        ;;; Quit
        "q"   '(:ignore t :which-key "Quit")
        "qq" '(kill-emacs :which-key "quit")
        "qr" '(restart-emacs :which-key "restart")

        ;;; Search
        "s" '(:ignore t :which-key "Search")
        "ss" '(swiper :which-key "search buffer")
        "sS" '(lambda ()
                 (interactive)
                 (let ((input (if (region-active-p)
                                  (buffer-substring-no-properties
                                   (region-beginning) (region-end))
                                (thing-at-point 'symbol t))))
                   (swiper input))
                 :which-key "search buffer")

        ;;; Themes
        "t" '(:ignore t :which-key "Theme")
        "ts" '(counsel-load-theme :which-key "switch theme")

        ;;; Windows
        "w"   '(:ignore t :which-key "Windows")
        "wd" '(delete-window :which-key "close window")
        "w/" '((lambda ()
                  (interactive)
                  (split-window-horizontally)
                  (other-window 1))
                :which-key "split vertical")
        "w-" '((lambda ()
                  (interactive)
                  (split-window-vertically)
                  (other-window 1))
                :which-key "split horizontal")
        "wh" '(evil-window-left :which-key "window left")
        "w<left>" '(evil-window-left :which-key nil)
        "wj" '(evil-window-down :which-key "window down")
        "w<down>" '(evil-window-down :which-key nil)
        "wk" '(evil-window-up :which-key "window up")
        "w<up>" '(evil-window-up :which-key nil)
        "wl" '(evil-window-right :which-key "window right")
        "w<right>" '(evil-window-right :which-key nil)
        "w=" '(balance-windows :which-key "balance window split")))
  #+END_SRC

*** Global keybinding configuration macro

#+BEGIN_SRC emacs-lisp
  (defmacro global-keymap (&rest bindings)
    "Add global BINDINGS as key bindings under `space-leader-def`.
  All of the arguments are treated exactly like they are in
  'general' package."
    `(space-leader-def
       :states '(normal emacs)
       ,@bindings))
#+END_SRC

*** Major Mode keybinding configuration macro

#+BEGIN_SRC emacs-lisp
  (defmacro keymap-for-mode (mode key def &rest bindings)
    "Add KEY and DEF as key bindings under `space-leader-def` for MODE.
  mode should be a quoted symbol corresponding to a valid major mode.
  the rest of the arguments are treated exactly like they are in
  'general' package."
    (let (mode-bindings)
      (while key
        (push def mode-bindings)
        (push (concat "m" key) mode-bindings)
        (setq key (pop bindings) def (pop bindings)))
      `(space-leader-def
         :states 'normal
         :keymaps ',(intern (format "%s-map" (eval mode)))
         ,@mode-bindings)))
#+END_SRC

*** Evil keybinding macro for major mode
 #+BEGIN_SRC emacs-lisp
   (defmacro evil-keymap-for-mode (mode &rest bindings)
     "Add BINDINGS to evil for the provided MODE.
   mode should be a quoted symbol corresponding to a valid major mode.
   the rest of the arguments are treated exactly like they are in
   'general' package."
     `(general-define-key
       :states 'normal
       :keymaps ',(intern (format "%s-map" (eval mode)))
       ,@bindings))
 #+END_SRC
** Project Configuration
*** Editorconfig
Read files to set coding style options according to current project

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :defer t
    :config (editorconfig-mode 1))
#+END_SRC

*** Projectile

  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :commands (projectile-run-shell-command-in-root
                 projectile-replace-regexp
                 projectile-toggle-between-implementation-and-test
                 projectile-invalidate-cache
                 projectile-replace
                 projectile-kill-buffers
                 projectile-recentf)
      :delight ;;'(:eval (concat " " (projectile-project-name)))
      :config
      (progn
        (setq projectile-indexing-method 'alien
              projectile-completion-system 'ivy
              projectile-enable-caching nil
              projectile-switch-project-action 'counsel-projectile-find-file
              projectile-sort-order 'recentf)
        (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
        (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
        (add-to-list 'projectile-project-root-files ".clang_complete")

        (projectile-mode +1)))


    (global-keymap
     "p"  '(:ignore t :which-key "Projects")
     "p!" '(projectile-run-shell-command-in-root :which-key "run command")
     "p%" '(projectile-replace-regexp :which-key "replace regexp")
     ;; "p a" '(projectile-toggle-between-implementation-and-test :which-key "toggle test")
     "pI" '(projectile-invalidate-cache :which-key "clear cache")
     "pR" '(projectile-replace :which-key "replace")
     "pk" '(projectile-kill-buffers :which-key "kill buffers")
     "pr" '(projectile-recentf :which-key "recent files"))
  #+END_SRC

*** Direnv
Dynamically load ENV variables from .envrc, if present.
#+BEGIN_SRC emacs-lisp
  (use-package direnv
    :defer 2
    :ensure-system-package direnv)
#+END_SRC

** Auto-Completion
*** amx
A more active fork of smex.
#+BEGIN_SRC emacs-lisp
  (use-package amx
    :hook (after-init . amx-initialize))
#+END_SRC

*** Ivy
  Buffer completion. Like Helm, but lighter and easier to understand.

  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :demand
      :delight
      :custom
      (ivy-use-virtual-buffers t)
      (ivy-count-format "(%d/%d) ")
      (ivy-wrap t)
      (ivy-display-style 'fancy)
      (ivy-format-function 'ivy-format-function-line)
      (ivy-initial-inputs-alist nil)
      (ivy-re-builders-alist
       ;; allow input not in order
       '((t . ivy--regex-ignore-order)))
      (ivy-use-selectable-prompt t))

    (use-package doom-todo-ivy
      :ensure nil
      :commands doom/ivy-tasks
      :load-path "vendor/"
      :config
      (global-keymap
       "p T" '(doom/ivy-tasks :which-key "List project tasks")))

    (use-package ivy-rich
      :disabled
      :load-path "vendor/"
      ;; :defer 2
      :after ivy
      :custom
      (ivy-virtual-abbreviate 'full)
      (ivy-rich-switch-buffer-align-virtual-buffer t)
      (ivy-rich-path-style 'abbrev)
      :config
      (ivy-rich-mode 1))

    (use-package ivy-posframe
      :hook (ivy-mode . ivy-posframe-enable)
      :defines ivy-posframe-parameters
      :preface
      ;; This function searches the entire `obarray' just to populate
      ;; `ivy-display-functions-props'. There are 15k entries in mine! This is
      ;; wasteful, so...
      (advice-add #'ivy-posframe-setup :override #'ignore)
      :config
      (setq ivy-fixed-height-minibuffer nil
            ivy-posframe-parameters
            `((min-width . 90)
              (min-height . ,ivy-height)
              (internal-border-width . 10)))

      ;; ... let's do it manually instead
      (unless (assq 'ivy-posframe-display-at-frame-bottom-left ivy-display-functions-props)
        (dolist (fn (list 'ivy-posframe-display-at-frame-bottom-left
                          'ivy-posframe-display-at-frame-center
                          'ivy-posframe-display-at-point
                          'ivy-posframe-display-at-frame-bottom-window-center
                          'ivy-posframe-display
                          'ivy-posframe-display-at-window-bottom-left
                          'ivy-posframe-display-at-window-center
                          '+ivy-display-at-frame-center-near-bottom))
          (push (cons fn '(:cleanup ivy-posframe-cleanup)) ivy-display-functions-props)))
      ;; default to posframe display function
      (setf (alist-get t ivy-display-functions-alist) #'+ivy-display-at-frame-center-near-bottom)

      ;; posframe doesn't work well with async sources
      (dolist (fn '(swiper counsel-ag counsel-grep counsel-git-grep))
        (setf (alist-get fn ivy-display-functions-alist) #'ivy-display-function-fallback)))
  #+END_SRC

*** Counsel

  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :commands (counsel-M-x counsel-find-file)
      :custom
      (counsel-mode-override-describe-bindings t)
      :general
      (general-define-key
       "M-x" 'counsel-M-x
       "C-x C-f" 'counsel-find-file))

    (use-package counsel-projectile
      :commands (counsel-projectile-switch-to-buffer
                 counsel-projectile-find-dir
                 counsel-projectile-find-file
                 counsel-projectile-switch-project
                 counsel-projectile-rg))

    (global-keymap
     "pb" '(counsel-projectile-switch-to-buffer
            :which-key "switch to buffer")
     "pd" '(counsel-projectile-find-dir
            :which-key "find directory")
     "pf" '(counsel-projectile-find-file
            :which-key "open file")
     "pp" '(counsel-projectile-switch-project
            :which-key "open project")
     "ps" '(counsel-projectile-rg
            :which-key "search in project"))

    (use-package counsel-dash
      :commands counsel-dash
      :hook
      ((lisp-mode . (lambda ()
                      (setq-local counsel-dash-docsets '("Common_Lisp"))))
       (emacs-lisp-mode . (lambda ()
                            (setq-local counsel-dash-docsets '("Emacs_Lisp"))))
       (ruby-mode . (lambda ()
                      (setq-local counsel-dash-docsets '("Ruby"))))
       (projectile-rails-mode . (lambda ()
                                  (setq-local counsel-dash-docsets '("Ruby_on_Rails_5"))))
       (sql-mode . (lambda ()
                     (setq-local counsel-dash-docsets '("PostgreSQL"))))
       (web-mode . (lambda ()
                     (setq-local counsel-dash-docsets '("Javascript" "HTML")))))
      :custom
      (counsel-dash-browser-func 'eww)
      (counsel-dash-common-docsets '()))

    (use-package counsel-etags
      :requires counsel
      :commands (counsel-etags-find-tag-at-point
                 counsel-etags-scan-code
                 counsel-etags-grep
                 counsel-etags-grep-symbol-at-point
                 counsel-etags-recent-tag
                 counsel-etags-find-tag
                 counsel-etags-list-tag))
  #+END_SRC

*** Company
Auto-completion framework for most modes

#+BEGIN_SRC emacs-lisp
  (use-package company
    :defer t
    :delight
    :defines company-backends
    :hook (after-init . global-company-mode)
    :custom
    ;; (company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
    (company-dabbrev-downcase nil)
    (company-dabbrev-ignore-case nil)
    (company-dabbrev-code-other-buffers t)
    (company-echo-delay 0) ; remove annoying blinking
    (company-idle-delay 0.6)
    (company-minimum-prefix-length 2)
    (company-require-match 'never)
    (company-selection-wrap-around t)
    (company-tooltip-align-annotations t)
    (company-tooltip-flip-when-above t)
    (company-tooltip-limit 14)
    (company-global-modes
     '(not eshell-mode comint-mode erc-mode message-mode help-mode gud-mode))
    (company-frontends '(company-pseudo-tooltip-frontend
                         company-echo-metadata-frontend))
    (company-transformers '(company-sort-by-occurrence))
    (company-backends '()))


  (use-package company-async-files
    :defer t
    :no-require t
    :ensure nil
    :load-path "vendor/"
    :requires company)

  (use-package company-box
    :disabled
    :defer t
    :hook (company-mode . company-box-mode)
    :config
    (setq company-box-backends-colors nil
          company-box-max-candidates 50
          company-box-icons-yasnippet (all-the-icons-material "short_text" :height 0.8 :face 'all-the-icons-green)
          company-box-icons-unknown (all-the-icons-material "find_in_page" :height 0.8 :face 'all-the-icons-purple)
          company-box-icons-elisp
          (list (all-the-icons-material "functions"                        :height 0.8 :face 'all-the-icons-red)
                (all-the-icons-material "check_circle"                     :height 0.8 :face 'all-the-icons-blue)
                (all-the-icons-material "stars"                            :height 0.8 :face 'all-the-icons-orange)
                (all-the-icons-material "format_paint"                     :height 0.8 :face 'all-the-icons-pink))
          company-box-icons-lsp
          '((1  . (all-the-icons-material "text_fields"              :height 0.8 :face 'all-the-icons-green)) ; text
            (2  . (all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))   ; method
            (3  . (all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))   ; function
            (4  . (all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))   ; constructor
            (5  . (all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))   ; field
            (6  . (all-the-icons-material "adjust"                   :height 0.8 :face 'all-the-icons-blue))  ; variable
            (7  . (all-the-icons-material "class"                    :height 0.8 :face 'all-the-icons-red))   ; class
            (8  . (all-the-icons-material "settings_input_component" :height 0.8 :face 'all-the-icons-red))   ; interface
            (9  . (all-the-icons-material "view_module"              :height 0.8 :face 'all-the-icons-red))   ; module
            (10 . (all-the-icons-material "settings"                 :height 0.8 :face 'all-the-icons-red))   ; property
            (11 . (all-the-icons-material "straighten"               :height 0.8 :face 'all-the-icons-red))   ; unit
            (12 . (all-the-icons-material "filter_1"                 :height 0.8 :face 'all-the-icons-red))   ; value
            (13 . (all-the-icons-material "plus_one"                 :height 0.8 :face 'all-the-icons-red))   ; enum
            (14 . (all-the-icons-material "filter_center_focus"      :height 0.8 :face 'all-the-icons-red))   ; keyword
            (15 . (all-the-icons-material "short_text"               :height 0.8 :face 'all-the-icons-red))   ; snippet
            (16 . (all-the-icons-material "color_lens"               :height 0.8 :face 'all-the-icons-red))   ; color
            (17 . (all-the-icons-material "insert_drive_file"        :height 0.8 :face 'all-the-icons-red))   ; file
            (18 . (all-the-icons-material "collections_bookmark"     :height 0.8 :face 'all-the-icons-red))   ; reference
            (19 . (all-the-icons-material "folder"                   :height 0.8 :face 'all-the-icons-red))   ; folder
            (20 . (all-the-icons-material "people"                   :height 0.8 :face 'all-the-icons-red))   ; enumMember
            (21 . (all-the-icons-material "pause_circle_filled"      :height 0.8 :face 'all-the-icons-red))   ; constant
            (22 . (all-the-icons-material "streetview"               :height 0.8 :face 'all-the-icons-red))   ; struct
            (23 . (all-the-icons-material "event"                    :height 0.8 :face 'all-the-icons-red))   ; event
            (24 . (all-the-icons-material "control_point"            :height 0.8 :face 'all-the-icons-red))   ; operator
            (25 . (all-the-icons-material "class"                    :height 0.8 :face 'all-the-icons-red))))

    ;; Until sebastiencs/company-box#40 is merged
    (defun +company*box-frontend-even-if-single (command)
      (cond ((eq command 'hide)
             (company-box-hide))
            ((equal company-candidates-length 0)
             (company-box-hide))
            ((eq command 'update)
             (company-box-show))
            ((eq command 'post-command)
             (company-box--post-command))))
    (advice-add #'company-box-frontend :override #'+company*box-frontend-even-if-single))
  ;; :load-path "vendor/company-box/")

  (use-package company-prescient
    :hook (company-mode . company-prescient-mode)
    :config
    (prescient-persist-mode +1))

  ;; (use-package company-quickhelp
  ;;   :hook (company-mode . company-quickhelp-mode)
  ;;   :custom
  ;;   (company-quickhelp-delay 0.1)
  ;;   :general
  ;;   (general-def 'insert company-quickhelp-mode-map
  ;;     "C-k" 'company-select-previous))

  (use-package company-flx
    :hook (company-mode . company-flx-mode))

  (use-package company-posframe
    :disabled
    :delight
    :hook (company-mode . company-posframe-mode))

  ;; General
  (use-package company-emoji
    :no-require t
    :defer 5
    :hook ((markdown-mode git-commit-mode magit-status-mode magit-log-mode) . (lambda ()
                                                                                (set (make-local-variable 'company-backends) '(company-emoji)))))

  ;; C/C++
  (use-package company-irony
    :after irony-mode
    :hook irony-mode
    :custom
    (company-irony-ignore-case 'smart))

  (use-package company-irony-c-headers
    :after company-irony
    :hook (irony-mode . (lambda ()
                          (set (make-local-variable 'company-backends) '((company-irony-c-headers company-irony company-etags))))))

  ;; Python
  (use-package company-anaconda
    :after python-mode
    :hook (python-mode . (lambda ()
                           (set (make-local-variable 'company-backends) '(company-anaconda)))))

  ;; Golang
  (use-package company-go
    :after go-mode
    :hook (go-mode . (lambda ()
                       (set (make-local-variable 'company-backends) '(company-go))))
    :custom
    (company-go-show-annotation t))

  ;; Shell
  (use-package company-shell
    :custom
    (company-shell-delete-duplicates t)
    :hook (sh-mode . (lambda ()
                       (set (make-local-variable 'company-backends) '(company-shell company-async-files)))))

  ;;; Language Server Mode
  (use-package eglot
    :disabled ;; Works but not as good as company-go
    :after company
    :config
    (progn
      (add-to-list
       'eglot-server-programs
       '(go-mode . ("go-langserver" "-gocodecompletion")))))

  (use-package lsp-mode
    :disabled ;; TODO: replace with eglot
    :hook prog-mode
    :custom
    (lsp-message-project-root-warning t))

  (use-package lsp-ui
    :disabled
    :hook (lsp-mode . lsp-ui-mode))

  (use-package company-lsp
    :disabled
    :after (company lsp-mode)
    :custom
    (company-lsp-async t)
    (company-lsp-enable-snippet t)
    :config
    (push 'company-lsp company-backends))


  (custom-set-faces
   '(company-tooltip-common
     ((t (:inherit company-tooltip :weight bold :underline nil))))
   '(company-tooltip-common-selection
     ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))
  #+END_SRC

** Languages
*** Complete
**** Golang
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :mode "\\.go\\'"
    :requires (company)
    :config
    (add-hook 'before-save-hook 'gofmt-before-save)
    (defun my-go-mode-hook-fn ()
      (go-eldoc-setup)
      ;; (set (make-local-variable 'company-backends) '(company-go))
      (setq-local company-backends '(company-go))
      (setq tab-width 2
            indent-tabs-mode 1)
      (flycheck-gometalinter-setup)
      (flycheck-mode 1))
    (add-hook 'go-mode-hook #'my-go-mode-hook-fn)
    (keymap-for-mode 'go-mode
                     "t" '(:ignore t :which-key "test")
                     "ta" '(js/go-run-test-current-suite :which-key "run suite")
                     "tt" '(js/go-run-test-current-function :which-key "run current function")
                     "tg" '(:ignore t :which-key "generate")
                     "tgf" '(go-gen-test-exported :which-key "all exported functions")
                     "tga" '(go-gen-test-all :which-key "all functions")
                     "tgs" '(go-gen-test-dwim :which-key "selected region")

                     ;; Go To
                     "g" '(:ignore t :which-key "goto")
                     "gc" '(go-coverage :which-key "coverage")

                     ;; Imports
                     "i" '(:ignore t :which-key "imports")
                     "ia" '(go-import-add :which-key "add")
                     "ig" '(go-import-add :which-key "goto")
                     "ir" '(go-remove-unused-imports :which-key "remove unused")

                     ;; Execute
                     "x" '(:ignore t :which-key "execute")
                     "xx" '(js/go-run-main :which-key "run main")

                     ;; Refactoring
                     "r" '(:ignore t :which-key "refactoring")
                     "ri" '(go-impl :which-key "implement interface")
                     "rs" '(go-fill-struct :which-key "fill struct")
                     "rd" '(godoctor-godoc :which-key "godoc")
                     "re" '(godoctor-extract :which-key "extract")
                     "rn" '(godoctor-rename :which-key "rename")
                     ;; "rN" '(go-rename :which-key "rename")
                     "rt" '(godoctor-toggle :which-key "toggle")

                     ;; Help
                     "h" '(:ignore t :which-key "help")
                     "hh" '(godoc-at-point :which-key "godoc at point"))
    :custom
    (gofmt-command "goimports")
    ;; :ensure-system-package
    ;; ((gocode . "go get -u github.com/mdempsky/gocode")
    ;;  (gometalinter . "go get -u github.com/alecthomas/gometalinter")
    ;;  (godoc . "go get -u golang.org/x/tools/cmd/godoc")
    ;;  (goimports . "go get -u golang.org/x/tools/cmd/goimports")
    ;;  (guru . "go get -u golang.org/x/tools/cmd/guru"))
    )

  (use-package go-eldoc
    :commands go-eldoc-setup)

  (use-package flycheck-gometalinter
    :commands flycheck-gometalinter-setup
    ;; :hook (go-mode . flycheck-gometalinter-setup)
    :custom
    ;; skip linting for vendor dirs
    (flycheck-gometalinter-vendor t)
    ;; use in test files
    (flycheck-gometalinter-test t)
    ;; only use fast linters
    (flycheck-gometalinter-fast t)
    ;; explicitly disable 'gotype' & 'govet' linters (also currently broken Nix overlays)
    (flycheck-gometalinter-disable-linters
     '("gosec" "gotype" "vet" "vetshadow" "megacheck" "interfacer" "ineffassign")))

  (use-package go-projectile
    :hook (go-mode . go-projectile-mode))

  (use-package go-gen-test
    :commands (go-gen-test-exported
               go-gen-test-all
               go-gen-test-dwim)
    ;; :ensure-system-package
    ;; (gotests . "go get -u github.com/cweill/gotests/...")
    )

  (use-package go-fill-struct
    :commands (go-fill-struct)
    ;; :ensure-system-package
    ;; (fillstruct . "go get -u github.com/davidrjenni/reftools/cmd/fillstruct")
    )

  (use-package godoctor
    :commands (godoctor-godoc
               godoctor-extract
               godoctor-rename
               godoctor-toggle))

  (use-package go-rename
    :commands (go-rename)
    ;; :ensure-system-package
    ;; (gorename . "go get -u golang.org/x/tools/cmd/gorename")
    )

  (use-package go-impl
    :commands go-impl
    ;; :ensure-system-package
    ;; (impl . "go get -u github.com/josharian/impl")
    )

  ;; Taken from js
  (defun js/go-run-tests (args)
  (interactive)
  (compilation-start (concat "go test " args " " go-use-test-args)
                      nil (lambda (n) go-test-buffer-name) nil))

  (defun js/go-run-test-current-function ()
  (interactive)
  (if (string-match "_test\\.go" buffer-file-name)
      (let ((test-method (if go-use-gocheck-for-testing
                              "-check.f"
                          "-run")))
          (save-excursion
          (re-search-backward "^func[ ]+\\(([[:alnum:]]*?[ ]?[*]?[[:alnum:]]+)[ ]+\\)?\\(Test[[:alnum:]_]+\\)(.*)")
          (js/go-run-tests (concat test-method "='" (match-string-no-properties 2) "$'"))))
      (message "Must be in a _test.go file to run go-run-test-current-function")))

  (defun js/go-run-test-current-suite ()
  (interactive)
  (if (string-match "_test\.go" buffer-file-name)
      (if go-use-gocheck-for-testing
          (save-excursion
              (re-search-backward "^func[ ]+\\(([[:alnum:]]*?[ ]?[*]?\\([[:alnum:]]+\\))[ ]+\\)?Test[[:alnum:]_]+(.*)")
              (js/go-run-tests (concat "-check.f='" (match-string-no-properties 2) "'")))
          (message "Gocheck is needed to test the current suite"))
      (message "Must be in a _test.go file to run go-test-current-suite")))


  (defun js/go-run-main ()
  (interactive)
  (shell-command
  (format "go run %s"
          (shell-quote-argument (or (file-remote-p (buffer-file-name (buffer-base-buffer)) 'localname)
                                      (buffer-file-name (buffer-base-buffer)))))))
#+END_SRC

**** Ruby

#+BEGIN_SRC emacs-lisp
  (use-package ruby-mode
    :ensure nil
    :ensure-system-package
    ((ruby-lint   . "gem install ruby-lint")
     (ripper-tags . "gem install ripper-tags")
     (pry . "gem install pry"))
    :hook (ruby-mode . flycheck-mode)
    :config
    (add-hook 'ruby-mode-hook
              '(lambda ()
                 (setq evil-shift-width ruby-indent-level)))
    (keymap-for-mode 'ruby-mode
                     "T" '(:ignore t :which-key "toggle")
                     "T'" 'ruby-toggle-string-quotes
                     "T{" 'ruby-toggle-block)
    :custom
    (ruby-insert-encoding-magic-comment nil)
    (ruby-align-to-stmt-keywords
     '(if while unless until begin case for def)))

  (use-package bundler
    :hook (ruby-mode . bundler-mode)
    :config
    (keymap-for-mode 'ruby-mode
                     "b" '(:ignore t :which-key "bundle")
                     "bc" 'bundle-check
                     "bi" 'bundle-install
                     "bs" 'bundle-console
                     "bu" 'bundle-update
                     "bx" 'bundle-exec
                     "bo" 'bundle-open))

  (use-package inf-ruby
    :hook ((ruby-mode . inf-ruby-minor-mode)
           (compilation-filter-hook . inf-ruby-auto-enter))
    :custom
    (inf-ruby-console-environment "development")
    :config
    (keymap-for-mode 'ruby-mode
                     "s" '(:ignore t :which-key "repl")
                     "sb" 'ruby-send-buffer
                     "sB" 'ruby-send-buffer-and-go
                     "sf" 'ruby-send-definition
                     "sF" 'ruby-send-definition-and-go
                     "sl" 'ruby-send-line
                     "sL" 'ruby-send-line-and-go
                     "sr" 'ruby-send-region
                     "sR" 'ruby-send-region-and-go
                     "ss" 'ruby-switch-to-inf))

  (use-package company-inf-ruby
    :after inf-ruby
    :config
    (add-to-list 'company-backends 'company-inf-ruby))

  ;; Not available yet on MELPA
  ;; (use-package lsp-ruby
  ;;   :requires lsp-mode
  ;;   :hook (ruby-mode . lsp-ruby-enable))

  ;; (use-package robe
  ;;   :disabled
  ;;   :hook (ruby-mode . robe-mode)
  ;;   :config (add-to-list 'company-backends 'company-robe))

  (use-package rspec-mode
    :hook (ruby-mode . rspec-mode)
    :custom
    (compilation-scroll-output 'first-error)
    (rspec-autosave-buffer t)
    :config
    (add-hook 'rspec-compilation-mode-hook 'inf-ruby-auto-enter nil t)
    (with-eval-after-load 'smartparens
      (sp-with-modes 'ruby-mode
        (sp-local-pair
         "{" "}"
         :pre-handlers '(sp-ruby-pre-handler)
         :post-handlers '(sp-ruby-post-handler
                          (js|smartparens-pair-newline-and-indent "RET"))
         :suffix "")))
    (keymap-for-mode 'ruby-mode
                     "t" '(:ignore t :which-key "test")
                     "ta"    'rspec-verify-all
                     "tb"    'rspec-verify
                     "tc"    'rspec-verify-continue
                     "td"    'ruby/rspec-verify-directory
                     "te"    'rspec-toggle-example-pendingness
                     "tf"    'rspec-verify-method
                     "tl"    'rspec-run-last-failed
                     "tm"    'rspec-verify-matching
                     "tr"    'rspec-rerun
                     "tt"    'rspec-verify-single
                     "t~"    'rspec-toggle-spec-and-target-find-example
                     "t TAB" 'rspec-toggle-spec-and-target))

  (use-package rubocop
    :ensure-system-package
    (rubocop . "gem install rubocop")
    :hook (ruby-mode . rubocop-mode)
    :config
    (keymap-for-mode 'ruby-mode
                     "rr" '(:ignore t :which-key "Rubocop")
                     "rrd" 'rubocop-check-directory
                     "rrD" 'rubocop-autocorrect-directory
                     "rrf" 'rubocop-check-current-file
                     "rrF" 'rubocop-autocorrect-current-file
                     "rrp" 'rubocop-check-project
                     "rrP" 'rubocop-autocorrect-project))

  (use-package rbenv
    :hook (ruby-mode . global-rbenv-mode))

  (use-package yard-mode
    :hook (ruby-mode . yard-mode))

  (use-package ruby-hash-syntax
    :requires ruby-mode
    :config
    (keymap-for-mode 'ruby-mode
                     "fh" 'ruby-hash-syntax-toggle))

  (use-package projectile-rails
    :requires projectile
    :hook (projectile-mode . projectile-rails-on))
   #+END_SRC

**** SQL

   #+BEGIN_SRC emacs-lisp
     (use-package sql
       :ensure nil
       :mode "\\.sql$"
       :custom
       (sql-set-product-feature 'postgres :prompt-regexp "^[-[:alnum:]_]*=[#>] ")
       (sql-set-product-feature 'postgres :prompt-cont-regexp
                                "^[-[:alnum:]_]*[-(][#>] ")
       :config
       (progn
         (defun my-sql-login-hook ()
           "Custom SQL log-in behaviours. See `sql-login-hook'."
           ;; n.b. If you are looking for a response and need to parse the
           ;; response, use `sql-redirect-value' instead of `comint-send-string'.
           (when (eq sql-product 'postgres)
             (let ((proc (get-buffer-process (current-buffer))))
               ;; Output each query before executing it. (n.b. this also avoids
               ;; the psql prompt breaking the alignment of query results.)
               (comint-send-string proc "\\set ECHO queries\n"))))
         (add-hook 'sql-login-hook 'my-sql-login-hook)
         (add-hook 'sql-interactive-mode-hook
                   (lambda ()
                     (toggle-truncate-lines t)))))

     (use-package sql-indent
       :hook (sql-mode . sqlind-minor-mode))

     (use-package sqlup-mode
       :hook (sql-mode . sql-interactive-mode-hook))
   #+END_SRC

**** CSV

   #+BEGIN_SRC emacs-lisp
     (use-package csv-mode
       :mode "\\.csv$"
       :config
       (defun csv-align-visible ()
         "Align only visible entries in csv-mode."
         (interactive)
         (csv-align-fields nil (window-start) (window-end)))
       ;; C-c C-a is already bound to align all fields, but can be too slow.
       :bind (:map csv-mode-map
                   ("C-c C-w" . 'csv-align-visible)))

     (use-package vlf
       :hook csv-mode)
   #+END_SRC

**** JSON

   #+BEGIN_SRC emacs-lisp
   (use-package json-mode
     :custom
     (js-indent-level 2)
     :mode ("\\.json$"
            "\\.jshintrc$"))
   #+END_SRC

**** Dockerfile
   #+BEGIN_SRC emacs-lisp
   (use-package dockerfile-mode
     :mode "Dockerfile.*\\'")
   #+END_SRC
**** YAML

   #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode
     :mode "\\.ya?ml\'")

   #+END_SRC

**** Markdown

   #+BEGIN_SRC emacs-lisp
   (use-package markdown-mode
     :mode "\\.md$"
     :hook (markdown-mode . flyspell-mode))
   #+END_SRC

**** Lisp

#+BEGIN_SRC emacs-lisp
  (use-package lispy
    :disabled ; quite frustrating library in evil mode
    :custom
    (lispy-close-quotes-at-end-p t)
    :hook ((emacs-lisp-mode
            lisp-interaction-mode
            lisp-mode
            scheme-mode
            clojure-mode) . lispy-mode)
    :config
    (progn
      (defun conditionally-enable-lispy ()
        (when (eq this-command 'eval-expression)
          (lispy-mode 1)))
      (add-hook 'minibuffer-setup-hook 'conditionally-enable-lispy)))


  (use-package sly
    :requires evil
    :hook ((lisp-mode emacs-lisp-mode) . (lambda ()  (sly-setup '(sly-fancy))))
    :defer t
    :custom
    (inferior-lisp-program "sbcl")
    (sly-autodoc-use-multiline t)
    (sly-complete-symbol*-fancy t)
    (sly-kill-without-query-p t)
    (sly-repl-history-remove-duplicates t)
    (sly-repl-history-trim-whitespaces t)
    (sly-net-coding-system 'utf-8-unix)

    :config
    (progn
      (add-to-list 'company-backends 'company-capf)
      ;; (add-to-list 'evil-emacs-state-modes 'sly-mrepl-mode) (this one we want evil)
      (add-to-list 'evil-emacs-state-modes 'sly-inspector-mode)
      (add-to-list 'evil-emacs-state-modes 'sly-db-mode)
      (add-to-list 'evil-emacs-state-modes 'sly-xref-mode)
      (add-to-list 'evil-emacs-state-modes 'sly-stickers--replay-mode)
      (defun +common-lisp|cleanup-sly-maybe ()
        "Kill processes and leftover buffers when killing the last sly buffer."
        (unless (cl-loop for buf in (delq (current-buffer) (buffer-list))
                         if (and (buffer-local-value 'sly-mode buf)
                                 (get-buffer-window buf))
                         return t)
          (dolist (conn (sly--purge-connections))
            (sly-quit-lisp-internal conn 'sly-quit-sentinel t))
          (let (kill-buffer-hook kill-buffer-query-functions)
            (mapc #'kill-buffer
                  (cl-loop for buf in (delq (current-buffer) (buffer-list))
                           if (buffer-local-value 'sly-mode buf)
                           collect buf)))))

      (defun +common-lisp|init-sly ()
        "Attempt to auto-start sly when opening a lisp buffer."
        (cond ((sly-connected-p))
              ((executable-find inferior-lisp-program)
               (let ((sly-auto-start 'always))
                 (sly-auto-start)
                 (add-hook 'kill-buffer-hook #'+common-lisp|cleanup-sly-maybe nil t)))
              ((message "WARNING: Couldn't find `inferior-lisp-program' (%s)"
                        inferior-lisp-program))))
      (add-hook 'sly-mode-hook #'+common-lisp|init-sly)

      (defun +common-lisp*refresh-sly-version (version conn)
        "Update `sly-protocol-version', which will likely be incorrect or nil due to
  an issue where `load-file-name' is incorrect. Because Doom's packages are
  installed through an external script (bin/doom), `load-file-name' is set to
  bin/doom while packages at compile-time (not a runtime though)."
        (unless sly-protocol-version
          (setq sly-protocol-version (sly-version nil (locate-library "sly.el"))))
        (advice-remove #'sly-check-version #'+common-lisp*refresh-sly-version))
      (advice-add #'sly-check-version :before #'+common-lisp*refresh-sly-version)
      (keymap-for-mode 'lisp-mode
                       "'" 'sly

                       "h" '(:ignore t :which-key "help")
                       "ha" 'sly-apropos
                       "hb" 'sly-who-binds
                       "hd" 'sly-disassemble-symbol
                       "hh" 'sly-describe-symbol
                       "hH" 'sly-hyperspec-lookup
                       "hm" 'sly-who-macroexpands
                       "hp" 'sly-apropos-package
                       "hr" 'sly-who-references
                       "hs" 'sly-who-specializes
                       "hS" 'sly-who-sets
                       "h<" 'sly-who-calls
                       "h>" 'sly-calls-who

                       "c" '(:ignore t :which-key "compile")
                       "cc" 'sly-compile-file
                       "cC" 'sly-compile-and-load-file
                       "cf" 'sly-compile-defun
                       "cl" 'sly-load-file
                       "cn" 'sly-remove-notes
                       "cr" 'sly-compile-region

                       "e" '(:ignore t :which-key "eval")
                       "eb" 'sly-eval-buffer
                       "ee" 'sly-eval-last-expression
                       "eE" 'sly-eval-print-last-expression
                       "ef" 'sly-eval-defun
                       "eF" 'slime-undefine-function
                       "er" 'sly-eval-region

                       ;; "m g" 'spacemacs/common-lisp-navigation-transient-state/body
                       "m" '(:ignore t :which-key "macro")
                       "me" 'sly-macroexpand-1
                       "mE" 'sly-macroexpand-all

                       "s" '(:ignore t :which-key "repl")
                       "sc" 'sly-mrepl-clear-repl
                       "si" 'sly
                       "sq" 'sly-quit-lisp
                       "sr" 'sly-restart-inferior-lisp
                       "ss" 'sly-mrepl-sync

                       "S" '(:ignore t :which-key "stickers")
                       "Sb" 'sly-stickers-toggle-break-on-stickers
                       "Sc" 'sly-stickers-clear-defun-stickers
                       "SC" 'sly-stickers-clear-buffer-stickers
                       "Sf" 'sly-stickers-fetch
                       "Sr" 'sly-stickers-replay
                       "Ss" 'sly-stickers-dwim

                       "t" '(:ignore t :which-key "trace")
                       "tt" 'sly-toggle-trace-fdefinition
                       "tT" 'sly-toggle-fancy-trace
                       "tu" 'sly-untrace-all)))

  (use-package sly-mrepl
    :ensure nil ;; built-in to sly
    :defines sly-mrepl-mode-map
    :bind
    (:map sly-mrepl-mode-map
          ("<up>" . sly-mrepl-previous-input-or-button)
          ("<down>" . sly-mrepl-next-input-or-button)
          ("<C-up>" . sly-mrepl-previous-input-or-button)
          ("<C-down>" . sly-mrepl-next-input-or-button))
    :config
    (with-eval-after-load 'smartparens
      (sp-with-modes '(sly-mrepl-mode)
                     (sp-local-pair "'" "'" :actions nil)
                     (sp-local-pair "`" "`" :actions nil))))

  (use-package sly-repl-ansi-color
    :requires sly
    :demand t
    :config (push 'sly-repl-ansi-color sly-contribs))


  ;; (use-package sly-company
  ;; 	:requires (company sly))

  ;; (use-package slime
  ;; 	:hook lisp-mode
  ;; 	:defer t
  ;; 	:custom
  ;; 	(inferior-lisp-program "sbcl")

  ;; 	:config
  ;; 	(require 'slime-fuzzy)
  ;; 	(slime-setup)
  ;; 	:general
  ;; 	(space-leader-def 'normal lisp-mode
  ;;     "m '" 'slime

  ;;     "m c" '(:ignore t :which-key "compile")
  ;;     "m cc" 'slime-compile-file
  ;;     "m cC" 'slime-compile-and-load-file
  ;;     "m cl" 'slime-load-file
  ;;     "m cf" 'slime-compile-defun
  ;;     "m cr" 'slime-compile-region
  ;;     "m cn" 'slime-remove-notes

  ;;     "m e" '(:ignore t :which-key "eval")
  ;;     "m eb"  'slime-eval-buffer
  ;;     "m ef"  'slime-eval-defun
  ;;     "m eF"  'slime-undefine-function
  ;;     "m ee"  'slime-eval-last-expression
  ;;     "m er"  'slime-eval-region

  ;;     "m g" '(:ignore t :which-key "nav")
  ;;     "m gb"  'slime-pop-find-definition-stack
  ;;     "m gn"  'slime-next-note
  ;;     "m gN"  'slime-previous-note

  ;;     "m h" '(:ignore t :which-key "help")
  ;;     "m ha"  'slime-apropos
  ;;     "m hA"  'slime-apropos-all
  ;;     "m hd"  'slime-disassemble-symbol
  ;;     "m hh"  'slime-describe-symbol
  ;;     "m hH"  'slime-hyperspec-lookup
  ;;     "m hi"  'slime-inspect-definition
  ;;     "m hp"  'slime-apropos-package
  ;;     "m ht"  'slime-toggle-trace-fdefinition
  ;;     "m hT"  'slime-untrace-all
  ;;     "m h<"  'slime-who-calls
  ;;     "m h>"  'slime-calls-who
  ;;     ;; TODO: Add key bindings for who binds/sets globals?
  ;;     "m hr"  'slime-who-references
  ;;     "m hm"  'slime-who-macroexpands
  ;;     "m hs"  'slime-who-specializes

  ;;     "m m" '(:ignore t :which-key "macro")
  ;;     "m ma"  'slime-macroexpand-all
  ;;     "m mo"  'slime-macroexpand-1

  ;;     "m s" '(:ignore t :which-key "repl")
  ;;     "m se"  'slime-eval-last-expression-in-repl
  ;;     "m si"  'slime
  ;;     "m sq"  'slime-quit-lisp

  ;;     "m t" '(:ignore t :which-key "toggle")
  ;; 		"m tf"  'slime-toggle-fancy-trace
  ;; 		)
  ;; 	)

  ;; (use-package slime-company
  ;; 	:requires (slime company))

  ;; (use-package auto-compile
  ;; 	:commands auto-compile-on-save-mode
  ;;   :custom
  ;;   (auto-compile-display-buffer nil)
  ;; 	(auto-compile-use-mode-line nil))

  (use-package highlight-quoted
    :hook (emacs-lisp-mode . highlight-quoted-mode)
    :commands highlight-quoted-mode)


  ;; (use-package macrostep
  ;; 	:commands macrostep-expand
  ;;   ;; :config
  ;;   ;; (map! :map macrostep-keymap
  ;;   ;;       :n "RET"    #'macrostep-expand
  ;;   ;;       :n "e"      #'macrostep-expand
  ;;   ;;       :n "u"      #'macrostep-collapse
  ;;   ;;       :n "c"      #'macrostep-collapse

  ;;   ;;       :n "TAB"    #'macrostep-next-macro
  ;;   ;;       :n "n"      #'macrostep-next-macro
  ;;   ;;       :n "J"      #'macrostep-next-macro

  ;;   ;;       :n "S-TAB"  #'macrostep-prev-macro
  ;;   ;;       :n "K"      #'macrostep-prev-macro
  ;;   ;;       :n "p"      #'macrostep-prev-macro

  ;;   ;;       :n "q"      #'macrostep-collapse-all
  ;;   ;;       :n "C"      #'macrostep-collapse-all)
  ;;   ;; ;; `evil-normalize-keymaps' seems to be required for macrostep or it won't
  ;;   ;; ;; apply for the very first invocation
  ;; 	;; (add-hook 'macrostep-mode-hook #'evil-normalize-keymaps)
  ;; 	)

  ;; (use-package overseer
  ;; 	:commands overseer-test)
   #+END_SRC

**** Python
   #+BEGIN_SRC emacs-lisp
     (use-package python-mode
       :mode "\\.py")
     (use-package anaconda-mode
       :hook python-mode)
     (use-package pyenv-mode
       :if (executable-find "pyenv")
       :commands (pyenv-mode-versions)
       :hook python-mode)
   #+END_SRC

*** In Development / Incomplete
**** C/C++
   #+BEGIN_SRC emacs-lisp
     ;; C (via irony-mode)
     (use-package irony
       :hook ((c-mode . irony-mode)
              (c++-mode . irony-mode))
       :config
       (progn
         (setq irony-additional-clang-options '("-std=c++11"))
         (setq-default irony-cdb-compilation-databases '(irony-cdb-clang-complete
                                                         iron-cdb-libclang))

         (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
       (with-eval-after-load 'smartparens
         (sp-with-modes '(c++-mode objc-mode)
           (sp-local-pair "<" ">"
                          :when '(+cc-sp-point-is-template-p +cc-sp-point-after-include-p)
                          :post-handlers '(("| " "SPC"))))
         (sp-with-modes '(c-mode c++-mode objc-mode java-mode)
           (sp-local-pair "/*!" "*/" :post-handlers '(("||\n[i]" "RET") ("[d-1]< | " "SPC"))))))

     (use-package irony-eldoc
       :hook (irony-mode . irony-eldoc))

     (use-package flycheck-irony
       :hook (irony-mode . flycheck-irony-setup))
     ;; (use-package lsp-clangd
     ;;   :load-path "/vendor"
     ;;   :hook ((c-mode . lsp-clangd-c-enable)
     ;;          (c++-mode . lsp-clangd-c++-enable)
     ;;          (objc-mode . lsp-clangd-objc-enable)))
     (use-package platformio-mode
       :after irony-mode
       :hook ((c-mode . platformio-conditionally-enable)
              (c++-mode . platformio-conditionally-enable)))

     (use-package clang-format
       :disabled
       :after irony
       :config
       (progn
         (defun c-mode-before-save-hook ()
           (when (or (eq major-mode 'c++-mode) (eq major-mode 'c-mode))
             (call-interactively 'clang-format)))

         (add-hook 'before-save-hook #'c-mode-before-save-hook)))

     (use-package arduino-mode
       :after irony
       :config
       (add-to-list 'irony-supported-major-modes 'arduino-mode)
       (add-to-list 'irony-lang-compile-option-alist '(arduino-mode . "c++")))
   #+END_SRC

**** Erlang
   #+BEGIN_SRC emacs-lisp
     (use-package erlang
       :mode "\\.erl$")
   #+END_SRC

**** Elixir

   #+BEGIN_SRC emacs-lisp
     (use-package elixir-mode
       :commands elixir-mode
       :mode "\\.exs?"
       :config
       (with-eval-after-load 'smartparens
         (sp-with-modes 'elixir-mode
           (sp-local-pair "do" "end"
                          :when '(("RET" "<evil-ret>"))
                          :unless '(sp-in-comment-p sp-in-string-p)
                          :post-handlers '("||\n[i]"))
           (sp-local-pair "do " " end" :unless '(sp-in-comment-p sp-in-string-p))
           (sp-local-pair "fn " " end" :unless '(sp-in-comment-p sp-in-string-p)))))

     (use-package alchemist
       :hook (elixir-mode . alchemist-mode)
       :config
       (keymap-for-mode 'elixir-mode
                        "el" 'alchemist-eval-current-line
                        "eL" 'alchemist-eval-print-current-line
                        "er" 'alchemist-eval-region
                        "eR" 'alchemist-eval-print-region
                        "eb" 'alchemist-eval-buffer
                        "eB" 'alchemist-eval-print-buffer
                        "ej" 'alchemist-eval-quoted-current-line
                        "eJ" 'alchemist-eval-print-quoted-current-line
                        "eu" 'alchemist-eval-quoted-region
                        "eU" 'alchemist-eval-print-quoted-region
                        "ev" 'alchemist-eval-quoted-buffer
                        "eV" 'alchemist-eval-print-quoted-buffer

                        "gt" 'alchemist-project-toggle-file-and-tests
                        "gT" 'alchemist-project-toggle-file-and-tests-other-window

                        "h:" 'alchemist-help
                        "hH" 'alchemist-help-history
                        "hh" 'alchemist-help-search-at-point
                        "hr" 'alchemist-help--search-marked-region

                        "m:" 'alchemist-mix
                        "mc" 'alchemist-mix-compile
                        "mx" 'alchemist-mix-run

                        ;; "'"  'alchemist-iex-run
                        "sc" 'alchemist-iex-compile-this-buffer
                        "si" 'alchemist-iex-run
                        "sI" 'alchemist-iex-project-run
                        "sl" 'alchemist-iex-send-current-line
                        "sL" 'alchemist-iex-send-current-line-and-go
                        "sm" 'alchemist-iex-reload-module
                        "sr" 'alchemist-iex-send-region
                        "sR" 'alchemist-iex-send-region-and-go

                        "ta" 'alchemist-mix-test
                        "tb" 'alchemist-mix-test-this-buffer
                        "tB" 'alchemist-project-run-tests-for-current-file
                        "tt" 'alchemist-mix-test-at-point
                        "tF" 'alchemist-project-find-test
                        "tf" 'alchemist-mix-test-file
                        "tn" 'alchemist-test-mode-jump-to-next-test
                        "tN" 'alchemist-test-mode-jump-to-previous-test
                        "tr" 'alchemist-mix-rerun-last-test
                        "ts" 'alchemist-mix-test-stale
                        "tR" 'alchemist-test-toggle-test-report-display

                        "xb" 'alchemist-execute-this-buffer
                        "xf" 'alchemist-execute-file
                        "x:" 'alchemist-execute

                        "cb" 'alchemist-compile-this-buffer
                        "cf" 'alchemist-compile-file
                        "c:" 'alchemist-compile

                        "gg" 'alchemist-goto-definition-at-point
                        ;; "." 'alchemist-goto-definition-at-point
                        "gb" 'alchemist-goto-jump-back
                        ;; ","  'alchemist-goto-jump-back
                        "gN" 'alchemist-goto-jump-to-previous-def-symbol
                        "gn" 'alchemist-goto-jump-to-next-def-symbol
                        "gj" 'alchemist-goto-list-symbol-definitions

                        "Xi" 'alchemist-hex-info-at-point
                        "Xr" 'alchemist-hex-releases-at-point
                        "XR" 'alchemist-hex-releases
                        "XI" 'alchemist-hex-info
                        "Xs" 'alchemist-hex-search

                        "ol" 'alchemist-macroexpand-once-current-line
                        "oL" 'alchemist-macroexpand-once-print-current-line
                        "ok" 'alchemist-macroexpand-current-line
                        "oK" 'alchemist-macroexpand-print-current-line
                        "oi" 'alchemist-macroexpand-once-region
                        "oI" 'alchemist-macroexpand-once-print-region
                        "or" 'alchemist-macroexpand-region
                        "oR" 'alchemist-macroexpand-print-region))

     (use-package flycheck-mix
       :hook (elixir-mode . flycheck-mix-setup))
   #+END_SRC

**** Scala

   #+BEGIN_SRC emacs-lisp
     (use-package scala-mode
       :mode ("\\.\\(scala\\|sbt\\)\\'" . scala-mode))

     (use-package ensime
       :hook (scala-mode . ensime-mode))

     (use-package sbt-mode
       :hook (scala-mode . sbt-mode))
   #+END_SRC

**** JavaScript
   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode
       :mode "\\.m?js\\'"
       ;; :ensure-system-package
       ;; (eslint_d . "npm install -g eslint_d")
       ;; :bind
       ;; (:map js2-mode-map
       ;;       ("," . self-with-space)
       ;;       ("=" . pad-equals)
       ;;       (":" . self-with-space))
       :hook
       (js2-mode . js2-imenu-extras-mode)
       ;; :custom
       ;; (js2-mode-show-strict-warnings nil)
       ;; (js2-highlight-level 3)
       :config
       (js/javascript-keybindings)
       (defvaralias 'js-switch-indent-offset 'js2-basic-offset)
       (setenv "NODE_NO_READLINE" "1"))

     (defun js/javascript-keybindings ()
       "Define keybindings when working with Javascript."
       "w" 'js2-mode-toggle-warnings-and-errors

       "h" '(:ignore t :which-key "help")
       "g" '(:ignore t :which-key "goto")
       "r" '(:ignore t :which-key "refactor")

       "z" '(:ignore t :which-key "folding")
       "zc" 'js2-mode-hide-element
       "zo" 'js2-mode-show-element
       "zr" 'js2-mode-show-all
       "ze" 'js2-mode-toggle-element
       "zF" 'js2-mode-toggle-hide-functions
       "zC" 'js2-mode-toggle-hide-comments)

     (use-package nodejs-repl
       :ensure-system-package node
       :defer t)

     ;;; React
     (use-package rjsx-mode
       :requires js2-mode
       :config
       (bind-key "=" #'pad-equals rjsx-mode-map
                 (not (memq (js2-node-type (js2-node-at-point))
                            (list rjsx-JSX rjsx-JSX-ATTR rjsx-JSX-IDENT rjsx-JSX-MEMBER)))))
   #+END_SRC

**** TypeScript
   #+BEGIN_SRC emacs-lisp
     (use-package typescript-mode
       :defer t)

     (use-package tide
       :after (typescript-mode company flycheck)
       :hook ((typescript-mode . tide-setup)
              (typescript-mode . tide-hl-identifier-mode)
              (before-save . tide-format-before-save)))
   #+END_SRC
**** Web

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode
    (("\\.html\\'"       . web-mode)
     ("\\.erb\\'"        . web-mode)
     ("\\.eex\\'"        . web-mode)
     ("\\.php\\'"        . web-mode)
     ("\\.hbs\\'"        . web-mode)
     ("\\.handlebars\\'" . web-mode)
     ("\\.mustache\\'"   . web-mode)
     ("\\.inky-erb\\'"   . web-mode)
     ("\\.inky\\'"       . web-mode)
     ("\\.hbs\\'"        . web-mode))
    ;; :bind
    ;; (:map web-mode-map
    ;;       ("," . self-with-space)
    ;;       ("<C-return>" . html-newline-dwim))
    :config
    (add-hook 'web-mode-hook #'turn-off-smartparens-mode)
    :custom
    (web-mode-markup-indent-offset 2)
    (web-mode-css-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-enable-auto-quoting nil)
    (web-mode-enable-current-element-highlight t))

  (use-package company-web
    :hook web-mode
    :config
    (add-to-list 'company-backends 'company-web-html))

  (use-package css-mode
    :mode "\\.css\\.erb\\'"
    ;; :bind
    ;; (:map css-mode-map
    ;;       ("," . self-with-space)
    ;;       ("{" . open-brackets-newline-and-indent))
    :custom
    (css-indent-offset 2)
    :config
    (add-to-list 'company-backends 'company-css))

  (use-package scss-mode
    :mode "\\.scss$")

  (use-package counsel-css
    :hook (css-mode . counsel-css-imenu-setup))

  (use-package web-beautify
    :hook web-mode)

  (with-eval-after-load 'smartparens
    (sp-with-modes '(css-mode scss-mode less-css-mode stylus-mode)
      (sp-local-pair "/*" "*/"
                     :post-handlers '(("[d-3]||\n[i]" "RET") ("| " "SPC")))))
#+END_SRC
** Search
*** Swiper

  #+BEGIN_SRC emacs-lisp
    ;; Search regex
    (use-package swiper
      :general
      (general-define-key
       "C-s" 'swiper))
  #+END_SRC

*** Ripgrep

  #+BEGIN_SRC emacs-lisp
    (use-package rg
      :commands (rg rg-project rg-dwim rg-literal))
  #+END_SRC

** Editing
*** SmartParens Fn
  #+BEGIN_SRC emacs-lisp
    (defun js|smartparens-pair-newline (id action context)
      (save-excursion
        (newline)
        (indent-according-to-mode)))

    (defun js|smartparens-pair-newline-and-indent (id action context)
      (js|smartparens-pair-newline id action context)
      (indent-according-to-mode))
  #+END_SRC

*** Syntax Checking
 #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :hook (prog-mode . flycheck-mode)
     :custom
     (flycheck-rubocop-lint-only t)
     (flycheck-check-syntax-automatically '(mode-enabled save))
     (flycheck-disabled-checkers '(ruby-rubylint)))
   (use-package flycheck-pos-tip
     :hook (flycheck-mode . flycheck-pos-tip-mode))
 #+END_SRC

*** Spell Checking

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    ;; Disable on Windows because `aspell' 0.6+ isn't available.
    :if (not (eq system-type 'windows-nt))
    :commands flyspell-mode
    :hook
    (text-mode . turn-on-flyspell)
    (prog-mode . flyspell-prog-mode)
    :delight
    :config
    (defun js|flyspell-mode-toggle ()
      "Toggle flyspell mode."
      (interactive)
      (if flyspell-mode
          (flyspell-mode -1)
        (flyspell-mode 1)))

    (global-keymap
     "S" '(:ignore t :which-key "Spelling")
     "Sb" 'flyspell-buffer
     "Sn" 'flyspell-goto-next-error
     "tS" 'js|flyspell-mode-toggle)
    :custom
    ;; (ispell-silently-savep t)
    (ispell-program-name (executable-find "aspell"))
    (ispell-list-command "--list")
    (ispell-extra-args '("--sug-mode=ultra"
                         "--lang=en_US"
                         "--dont-tex-check-comments")))
  (use-package flyspell-correct
    :commands (flyspell-correct-word-generic
               flyspell-correct-previous-word-generic))

  (use-package flyspell-correct-ivy
    :commands (flyspell-correct-ivy)
    :requires ivy
    :init
    (setq flyspell-correct-interface #'flyspell-correct-ivy))
#+END_SRC

** Write Good

#+BEGIN_SRC emacs-lisp
  (use-package writegood-mode
    :defer t
    :hook (text-mode . writegood-mode))
#+END_SRC

** Movement
*** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init (evil-mode 1)
    :custom
    (evil-want-C-u-scroll t)
    (evil-want-Y-yank-to-eol t)
    (evil-shift-width 2)
    (evil-want-integration nil)
    :config
    (setq evil-want-visual-char-semi-exclusive t
          evil-magic t
          evil-echo-state t
          evil-indent-convert-tabs t
          evil-ex-search-vim-style-regexp t
          evil-ex-substitute-global t
          evil-ex-visual-char-range t  ; column range for ex commands
          evil-insert-skip-empty-lines t
          evil-mode-line-format 'nil
          evil-respect-visual-line-mode t
          ;; more vim-like behavior
          evil-symbol-word-search t
          ;; don't activate mark on shift-click
          shift-select-mode nil
          ;; cursor appearance
          evil-default-cursor '+evil-default-cursor
          evil-normal-state-cursor 'box
          ;; evil-emacs-state-cursor  '(box +evil-emacs-cursor)
          evil-insert-state-cursor 'bar
          evil-visual-state-cursor 'hollow)
    (fset 'evil-visual-update-x-selection 'ignore)
    ;; Change the cursor color in emacs mode
    (defvar +evil--default-cursor-color
      (or (ignore-errors (frame-parameter nil 'cursor-color))
          "#ffffff"))

    (defun +evil-default-cursor () (set-cursor-color +evil--default-cursor-color))
    (defun +evil-emacs-cursor () (set-cursor-color (face-foreground 'warning)))

    (defun +evil|update-cursor-color ()
      (setq +evil--default-cursor-color (face-background 'cursor)))
    (add-hook 'doom-load-theme-hook #'+evil|update-cursor-color)
    (defun +evil|update-shift-width ()
      (setq evil-shift-width tab-width))
    (add-hook 'after-change-major-mode-hook #'+evil|update-shift-width t)
    :general
    (general-define-key
     :states 'insert
     "C-v" 'cua-paste
     "C-c" 'cua-copy-region
     "C-x" 'cua-cut-region
     "C-z" 'undo-tree-undo
     "C-Z" 'undo-tree-redo))
#+END_SRC

Use `fd` to escape from evil-insert-mode.

#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :requires evil
    :init (evil-escape-mode 1)
    :delight
    :custom
    (evil-escape-delay 0.2))
#+END_SRC

**** SmartParens

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :defer 2
    :config
    (require 'smartparens-config)
    (setq sp-highlight-pair-overlay nil
          sp-highlight-wrap-overlay nil
          sp-highlight-wrap-tag-overlay nil
          sp-show-pair-from-inside t
          sp-cancel-autoskip-on-backward-movement nil
          sp-show-pair-delay 0.1
          sp-max-pair-length 4
          sp-max-prefix-length 50
          sp-escape-quotes-after-insert nil)
    ;; Smartparens' navigation feature is neat, but does not justify how expensive
    ;; it is. It's also less useful for evil users. This may need to be
    ;; reactivated for non-evil users though. Needs more testing!
    (defun js|disable-smartparens-navigate-skip-match ()
      (setq sp-navigate-skip-match nil
            sp-navigate-consider-sgml-tags nil))
    (add-hook 'after-change-major-mode-hook #'js|disable-smartparens-navigate-skip-match)

    ;; autopairing in `eval-expression' and `evil-ex'
    (defun js|init-smartparens-in-eval-expression ()
      "Enable `smartparens-mode' in the minibuffer, during `eval-expression' or
    `evil-ex'."
      (when (memq this-command '(eval-expression evil-ex))
        (smartparens-mode)))
    (add-hook 'minibuffer-setup-hook #'js|init-smartparens-in-eval-expression)
    (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)

    ;; smartparens breaks evil-mode's replace state
    (add-hook 'evil-replace-state-entry-hook #'turn-off-smartparens-mode)
    (add-hook 'evil-replace-state-exit-hook  #'turn-on-smartparens-mode)
    (smartparens-global-mode +1))
#+END_SRC

**** Rainbow Delimiters
Highlight matching delimiters with unique colors.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :defer t
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

Adapt to foreign indentation offsets
#+BEGIN_SRC emacs-lisp
  (use-package dtrt-indent
    :defer t
    :delight
    :custom (dtrt-indent-min-quality 60)
    :init (dtrt-indent-global-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :defer t
    :hook ((emacs-lisp-mode . aggressive-indent-mode)
           (css-mode . aggressive-indent-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package adaptive-wrap
    :defer t
    :config (adaptive-wrap-prefix-mode))
#+END_SRC
**** Jump to Definition
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :commands (dump-jump-go
               dumb-jump-go-other-window
               dump-jump-go-prompt
               dump-jump-go-prefer-external
               dumb-jump-go-prefer-external-other-window)
    :custom
    (dumb-jump-selector 'ivy))
#+END_SRC
**** Whitespace Management
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :defer 5
    :custom
    (whitespace-line-column fill-column)
    (whitespace-style
     '(face indentation tabs tab-mark spaces space-mark newline newline-mark
            trailing lines-tail))
    (whitespace-display-mappings
     '((tab-mark ?\t [?› ?\t])
       (newline-mark ?\n [?¬ ?\n])
       (space-mark ?\ [?·] [?.])))
    :config
    (add-hook 'before-save 'delete-trailing-whitespace))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :delight
    :defer t
    :config
    (setq ws-butler-global-exempt-modes
          (append ws-butler-global-exempt-modes
                  '(special-mode comint-mode term-mode eshell-mode)))
    (ws-butler-global-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :defer t
    :delight auto-revert-mode
    :config
    (setq auto-revert-verbose nil)
    (global-auto-revert-mode +1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :delight
    :custom
    (undo-tree-auto-save-history nil)
    :hook (after-init . global-undo-tree-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package unfill
    :disabled
    :bind ([remap fill-paragraph] . #'unfill-toggle))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (use-package evil-collection
  ;;   :requires evil
  ;;   :defer 5
  ;;   :custom
  ;;   (evil-collection-setup-minibuffer t)
  ;;   (evil-collection-company-use-tng nil)
  ;;   (evil-collection-mode-list '(go-mode
  ;;                                ivy
  ;;                                (pdf pdf-view)
  ;;                                ruby-mode))
  ;;   :init
  ;;   (evil-mode . evil-collection-init))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :defer 5
    :init (global-evil-surround-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-matchit
    :defer 5
    :init (global-evil-matchit-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-goggles
    :defer 5
    :delight
    :custom
    (evil-goggles-duration 0.1)
    (evil-goggles-enable-delete nil)
    :init
    (evil-goggles-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-easymotion
    :defer 5
    :delight)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-quickscope
    :defer t
    :delight
    :init (global-evil-quickscope-mode 1))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :defer t
    :delight
    :init (evil-commentary-mode))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package hideshow
    :functions hs-toggle-hiding
    :ensure nil
    :delight
    :config
    (progn
      (defun toggle-fold ()
        (interactive)
        (save-excursion
          (end-of-line)
          (hs-toggle-hiding))))
    :hook (prog-mode . hs-minor-mode))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (use-package evil-mc
  ;;   :hook (evil-mode . global-evil-mc-mode))
  ;; (use-package evil-mc-extras
  ;;   :hook (global-evil-mc-mode . global-evil-mc-extras-mode))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (use-package multiple-cursors
  ;;   :disabled
  ;;   :bind (("C->" . mc/mark-next-like-this)
  ;;          ("C-<" . mc/mark-previous-like-this)
  ;;          ("C-*" . mc/mark-all-like-this)))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-string-inflection
    :requires evil
    :defer t)

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :defer 5
    :hook ((text-mode prog-mode snippet-mode) . yas-minor-mode-on)
    :commands (yas-minor-mode yas-minor-mode-on yas-expand yas-expand-snippet
                              yas-lookup-snippet yas-insert-snippet yas-new-snippet
                              yas-visit-snippet-file snippet-mode)
    :config
    (setq yas-also-auto-indent-first-line t
          yas-triggers-in-field t) ; Allow nested snippets

    ;; fix an error caused by smartparens interfering with yasnippet bindings
    (advice-add #'yas-expand :before #'sp-remove-active-pair-overlay)

    ;; Exit snippets on ESC from normal mode
    (add-hook '+evil-esc-hook #'yas-exit-all-snippets))
#+END_SRC

*** Neotree

Directory tree

#+BEGIN_SRC emacs-lisp
  ;;; File Tree
  (use-package neotree
    :commands (neotree-toggle neotree-projectile-action)
    :config
    (setq neo-create-file-auto-open t
          neo-modern-sidebar t
          neo-point-auto-indent nil
          neo-theme (if (display-graphic-p) 'icons 'arrow)
          neo-window-fixed-size nil
          neo-window-width 28
          neo-show-hidden-files t
          neo-keymap-style 'concise)
    (general-nmap neotree-mode-map
      "RET" 'neotree-enter
      "TAB" 'neotree-stretch-toggle
      "q" 'neotree-hide
      "|" 'neotree-enter-vertical-split
      "-" 'neotree-enter-horizontal-split
      "'" 'neotree-quick-look
      "c" 'neotree-create-node
      "C" 'neotree-copy-node
      "d" 'neotree-delete-node
      "gr" 'neotree-refresh
      "H" 'neotree-select-previous-sibling-node
      "j" 'neotree-next-line
      "J" 'neotree-select-down-node
      "k" 'neotree-previous-line
      "K" 'neotree-select-up-node
      "L" 'neotree-select-next-sibling-node
      "q" 'neotree-hide
      "o" 'neotree-enter
      "r" 'neotree-rename-node
      "R" 'neotree-change-root
      "I" 'neotree-hidden-file-toggle))

  (global-keymap
   "ft" 'neotree-toggle
   "pt" 'neotree-projectile-action)
  #+END_SRC
** Visual
*** UI, Theme, etc.

  #+BEGIN_SRC emacs-lisp
    ;; Use Github as the standard
    ;; ref http://hilton.org.uk/blog/source-code-line-length
    (setq fill-column 125
          inhibit-startup-screen t
          blink-matching-paren nil
          visible-bell nil
          ring-bell-function 'ignore
          window-resize-pixelwise t
          frame-resize-pixelwise t)

    ;; This is MUCH faster than using set-face-attribute
    (add-to-list 'default-frame-alist '(font . "Fira Code:13"))

    ;; Appearance
    ;; Theme Emacs for dark color scheme
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark))

    (use-package all-the-icons)

    (use-package doom-themes
      :demand
      ;; :custom
      ;; (doom-molokai-brighter-comments t)
      :init
      (load-theme 'doom-molokai t)
      (+evil|update-cursor-color))

    (use-package doom-modeline
      :defer t
      :hook (after-init . doom-modeline-init))

    (use-package hide-mode-line
      :hook ((neotree-mode
              completion-list-mode
              completion-in-region-mode) . hide-mode-line-mode))

    ;;; Support Emojis in Emacs
    (use-package emojify
      :defer 5
      :custom
      (emojify-display-style 'unicode)
      :hook
      ((markdown-mode
        git-commit-mode
        magit-status-mode
        magit-log-mode) . emojify-mode))

    ;; TODO try out shackle instead
    ;; (use-package popwin
    ;;   :defer 3
    ;;   :hook (after-init . popwin-mode))

    ;;; Resize all buffers at once with C-M-= / C-M--
    (use-package default-text-scale
      :defer 3
      :init (default-text-scale-mode))

    ;;; Restart Emacs
    (use-package restart-emacs
      :commands restart-emacs)

    (use-package winum
      :defer t
      :config
      (progn
        (setq winum-auto-assign-0-to-minibuffer nil
              winum-auto-setup-mode-line nil
              winum-keymap nil
              winum-ignored-buffers '(" *which-key*"))
        (defun winum-assign-0-to-neotree ()
          (when (string-match-p (buffer-name) ".*\\*NeoTree\\*.*") 10))
        (add-to-list 'winum-assign-functions #'winum-assign-0-to-neotree)
        (global-keymap "`" 'winum-select-window-by-number
                       ;; "²" 'winum-select-window-by-number
                       "0" 'winum-select-window-0-or-10
                       "1" 'winum-select-window-1
                       "2" 'winum-select-window-2
                       "3" 'winum-select-window-3
                       "4" 'winum-select-window-4
                       "5" 'winum-select-window-5
                       "6" 'winum-select-window-6
                       "7" 'winum-select-window-7
                       "8" 'winum-select-window-8
                       "9" 'winum-select-window-9)
        (winum-mode)))
  #+END_SRC

*** Highlight TODO & FIXME comments
  #+BEGIN_SRC emacs-lisp
    ;; Highlight TODOs
    (use-package hl-todo
      :hook (after-init . global-hl-todo-mode))

  #+END_SRC

** Preferences
*** Indentation

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4
              indent-tabs-mode nil)
#+END_SRC

*** Other

#+BEGIN_SRC emacs-lisp
       ;; Adjust the built-in Emacs packages
       (defalias 'yes-or-no-p 'y-or-n-p)

       (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local)
         idle-update-delay 2 ; update ui less often (0.5 default)
         create-lockfiles nil
         cua-mode t
         desktop-save-mode nil
         indent-tabs-mode nil
         initial-scratch-message nil
         load-prefer-newer t
         sentence-end-double-space nil
         ;; keep the point out of the minibuffer
         minibuffer-prompt-properties '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt)
         ;; security
         gnutls-verify-error (not (getenv "INSECURE")) ; you shouldn't use this
         tls-checktrust gnutls-verify-error
         tls-program (list "gnutls-cli --x509cafile %t -p %p %h"
                   ;; compatibility fallbacks
                   "gnutls-cli -p %p %h"
                   "openssl s_client -connect %h:%p -no_ssl2 -no_ssl3 -ign_eof"))

   #+END_SRC

** Operating Systems
*** Linux
  #+BEGIN_SRC emacs-lisp
      (use-package linux
        :ensure nil
        :load-path "vendor/"
        :if (eq system-type 'gnu/linux))
  #+END_SRC

*** macOS
  #+BEGIN_SRC emacs-lisp
      (use-package osx
        :ensure nil
        :load-path "vendor/"
        :if (eq system-type 'darwin))
  #+END_SRC

** Built-in modes (Break down)

 #+BEGIN_SRC emacs-lisp
   (use-package window
     :ensure nil
     :preface (provide 'window)
     :custom
     (display-buffer-alist
      `((,(rx bos (or "*Flycheck errors*"
                      "*Backtrace"
                      "*Warnings"
                      "*compilation"
                      "*Help"
                      "*helpful"
                      "*ivy-occur"
                      "*less-css-compilation"
                      "*Packages"
                      "*SQL"))
         (display-buffer-reuse-window
          display-buffer-in-side-window)
         (side            . bottom)
         (reusable-frames . visible)
         (window-height   . 0.5))
        ("." nil (reusable-frames . visible)))))
   #+END_SRC

 #+BEGIN_SRC emacs-lisp
   (use-package files
     :no-require t
     :ensure nil
     :demand t
     :custom
     (backup-by-copying t)
     (require-final-newline t)
     (delete-old-versions t)
     (version-control t)
     (backup-directory-alist
      `((".*" . ,(no-littering-expand-var-file-name "backup/"))))
     (auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
     (large-file-warning-threshold (* 20 1000 1000) "20 megabytes."))

   ;; Version control
   (use-package vc-hooks
     :no-require t
     :ensure nil
     :demand t
     :custom (vc-follow-symlinks t))


   (use-package dired
     :no-require t
     :ensure nil
     :demand t
     :commands (dired)
     :custom
     (dired-dwim-target t "Enable side-by-side `dired` buffer targets.")
     (dired-recursive-copies 'always "Better recursion in `dired`.")
     (dired-recursive-deletes 'top)
     (delete-by-moving-to-trash t)
     (dired-use-ls-dired nil))

   ;; Line Numbers
   (use-package display-line-numbers
     :ensure nil
     :if (> emacs-major-version 25)
     :hook (prog-mode . display-line-numbers-mode))

   ;; Fix Annoyances
   (use-package uniquify
     :no-require t
     :ensure nil
     :demand t
     :custom (uniquify-buffer-name-style 'forward))

   ;; Shell
   (use-package sh-mode
     :ensure nil
     :mode
     (("\\.zshrc" . sh-mode)
      ("bashrc$" . sh-mode)
      ("bash_profile$" . sh-mode)
      ("bash_aliases$" . sh-mode)
      ("bash_local$" . sh-mode)
      ("bash_completion$" . sh-mode)))

   (use-package recentf
     :requires no-littering
     :defer t
     :ensure nil
     :custom
     (recentf-auto-cleanup 200)
     (recentf-max-saved-items 300)
     (recentf-auto-cleanup 'never)
     (recentf-filename-handlers '(file-truename abbreviate-file-name))
     (recentf-exclude
      (list #'file-remote-p "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\)$"
            "^/tmp/" "^/ssh:" "\\.?ido\\.last$" "\\.revive$" "/TAGS$"
            "^/var/folders/.+$" "\\.git/config" "\\.git/COMMIT_EDITMSG"))
     :config
     (progn
       (add-hook 'kill-emacs-hook #'recentf-cleanup)
       (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
       (add-to-list 'recentf-exclude no-littering-var-directory)
       (add-to-list 'recentf-exclude no-littering-etc-directory)
       (setq recentf-auto-save-timer
             (run-with-idle-timer 600 t 'recentf-save-list))))


   (use-package eldoc
     :ensure nil
     :delight
     :hook ((ielm-mode eval-expression-minibuffer-setup) . eldoc-mode))

   (use-package eshell
     :commands (eshell eshell-mode)
     :custom
     (eshell-visual-commands '("tmux" "htop" "bash" "zsh" "fish" "vim" "nvim"))
     (eshell-visual-subcommands '(("git" "log" "l" "diff" "show")))
     (eshell-history-size 10000)
     (eshell-hist-ignoredups t)
     (eshell-scroll-to-bottom-on-output 'this)
     (eshell-scroll-to-bottom-on-input 'all)
     (eshell-buffer-shorthand t)
     (eshell-kill-processes-on-exit t))

   (use-package helpful
     :after ivy
     :defer t
     :defines ivy-initial-inputs-alist
     :bind (("C-c C-d" . helpful-at-point))
     :config
     (general-define-key
      [remap describe-function] #'helpful-callable
      [remap describe-command]  #'helpful-command
      [remap describe-variable] #'helpful-variable
      [remap describe-key] #'helpful-key)
     (dolist (cmd '(helpful-callable
                    helpful-variable
                    helpful-function
                    helpful-macro
                    helpful-command))
       (cl-pushnew `(,cmd . "^") ivy-initial-inputs-alist))
     :general
     (space-leader-def
       :states '(normal visual insert emacs)
       "hh" '(:ignore t :which-key "helpful")
       "hhh" 'helpful-at-point
       "hhc" 'helpful-command
       "hhf" 'helpful-callable
       "hhk" 'helpful-key
       "hhm" 'helpful-macro
       "hhv" 'helpful-variable))
#+END_SRC




** Tools

*** Org Mode

    #+BEGIN_SRC emacs-lisp
  (defun js/org-keybindings ()
    "Define all keybindings we use in org mode."
    (keymap-for-mode 'org-mode
                     "'" 'org-edit-special
                     "c" 'org-capture

                     ;; Clock
                     ;; These keybindings should match those under the "aoC" prefix (below)
                     "C" '(:ignore t :which-key "clocks")
                     "Cc" 'org-clock-cancel
                     "Cd" 'org-clock-display
                     "Ce" 'org-evaluate-time-range
                     "Cg" 'org-clock-goto
                     "Ci" 'org-clock-in
                     "CI" 'org-clock-in-last
                     "Cj" 'org-clock-jump-to-current-clock
                     "Co" 'org-clock-out
                     "CR" 'org-clock-report
                     "Cr" 'org-resolve-clocks

                     "d" '(:ignore t :which-key "dates")
                     "dd" 'org-deadline
                     "ds" 'org-schedule
                     "dt" 'org-time-stamp
                     "dT" 'org-time-stamp-inactive
                     "ee" 'org-export-dispatch
                     "fi" 'org-feed-goto-inbox
                     "fu" 'org-feed-update-all

                     "a" 'org-agenda

                     "p" 'org-priority

                     "T" '(:ignore t :which-key "toggles")
                     "Tc" 'org-toggle-checkbox
                     "Te" 'org-toggle-pretty-entities
                     "Ti" 'org-toggle-inline-images
                     "Tl" 'org-toggle-link-display
                     "Tt" 'org-show-todo-tree
                     "TT" 'org-todo
                     "TV" 'space-doc-mode
                     "Tx" 'org-toggle-latex-fragment

                     ;; More cycling options (timestamps, headlines, items, properties)
                     "L" 'org-shiftright
                     "H" 'org-shiftleft
                     "J" 'org-shiftdown
                     "K" 'org-shiftup

                     ;; Change between TODO sets
                     "C-S-l" 'org-shiftcontrolright
                     "C-S-h" 'org-shiftcontrolleft
                     "C-S-j" 'org-shiftcontroldown
                     "C-S-k" 'org-shiftcontrolup

                     ;; Subtree editing
                     "s" '(:ignore t :which-key "trees/subtrees")
                     "sa" 'org-toggle-archive-tag
                     "sA" 'org-archive-subtree
                     "sb" 'org-tree-to-indirect-buffer
                     "sh" 'org-promote-subtree
                     "sj" 'org-move-subtree-down
                     "sk" 'org-move-subtree-up
                     "sl" 'org-demote-subtree
                     "sn" 'org-narrow-to-subtree
                     "sN" 'widen
                     "sr" 'org-refile
                     "ss" 'org-sparse-tree
                     "sS" 'org-sort

                     ;; tables
                     "t" '(:ignore t :which-key "tables")
                     "ta" 'org-table-align
                     "tb" 'org-table-blank-field
                     "tc" 'org-table-convert
                     "tdc" 'org-table-delete-column
                     "tdr" 'org-table-kill-row
                     "te" 'org-table-eval-formula
                     "tE" 'org-table-export
                     "th" 'org-table-previous-field
                     "tH" 'org-table-move-column-left

                     "ti" '(:ignore t :which-key "insert")
                     "tic" 'org-table-insert-column
                     "tih" 'org-table-insert-hline
                     "tiH" 'org-table-hline-and-move
                     "tir" 'org-table-insert-row

                     "tI" 'org-table-import
                     "tj" 'org-table-next-row
                     "tJ" 'org-table-move-row-down
                     "tK" 'org-table-move-row-up
                     "tl" 'org-table-next-field
                     "tL" 'org-table-move-column-right
                     "tn" 'org-table-create
                     "tN" 'org-table-create-with-table.el
                     "tr" 'org-table-recalculate
                     "ts" 'org-table-sort-lines

                     "tt" '(:ignore t :which-key "toggle")
                     "ttf" 'org-table-toggle-formula-debugger
                     "tto" 'org-table-toggle-coordinate-overlays

                     "tw" 'org-table-wrap-region

                     ;; Source blocks / org-babel
                     "b" '(:ignore t :which-key "babel")
                     "bp"     'org-babel-previous-src-block
                     "bn"     'org-babel-next-src-block
                     "be"     'org-babel-execute-maybe
                     "bo"     'org-babel-open-src-block-result
                     "bv"     'org-babel-expand-src-block
                     "bu"     'org-babel-goto-src-block-head
                     "bg"     'org-babel-goto-named-src-block
                     "br"     'org-babel-goto-named-result
                     "bb"     'org-babel-execute-buffer
                     "bs"     'org-babel-execute-subtree
                     "bd"     'org-babel-demarcate-block
                     "bt"     'org-babel-tangle
                     "bf"     'org-babel-tangle-file
                     "bc"     'org-babel-check-src-block
                     "bj"     'org-babel-insert-header-arg
                     "bl"     'org-babel-load-in-session
                     "bi"     'org-babel-lob-ingest
                     "bI"     'org-babel-view-src-block-info
                     "bz"     'org-babel-switch-to-session
                     "bZ"     'org-babel-switch-to-session-with-code
                     "ba"     'org-babel-sha1-hash
                     "bx"     'org-babel-do-key-sequence-in-edit-buffer
                     "b."     'spacemacs/org-babel-transient-state/body
                     ;; Multi-purpose keys
                     "," 'org-ctrl-c-ctrl-c
                     "*" 'org-ctrl-c-star
                     "-" 'org-ctrl-c-minus
                     "#" 'org-update-statistics-cookies
                     "RET"   'org-ctrl-c-ret
                     "M-RET" 'org-meta-return
                     ;; attachments
                     "A" 'org-attach
                     ;; insertion
                     "i" '(:ignore t :which-key "insert")
                     "id" 'org-insert-drawer
                     "ie" 'org-set-effort
                     "if" 'org-footnote-new
                     "ih" 'org-insert-heading
                     "iH" 'org-insert-heading-after-current
                     "iK" 'spacemacs/insert-keybinding-org
                     "il" 'org-insert-link
                     "in" 'org-add-note
                     "ip" 'org-set-property
                     "is" 'org-insert-subheading
                     "it" 'org-set-tags

                     "x" '(:ignore t :which-key "text")
                     ;; region manipulation

                     ;; "xb" (spacemacs|org-emphasize spacemacs/org-bold ?*)
                     ;; "xc" (spacemacs|org-emphasize spacemacs/org-code ?~)
                     ;; "xi" (spacemacs|org-emphasize spacemacs/org-italic ?/)
                     "xo" 'org-open-at-point
                     ;; "xr" (spacemacs|org-emphasize spacemacs/org-clear ? )
                     ;; "xs" (spacemacs|org-emphasize spacemacs/org-strike-through ?+)
                     ;; "xu" (spacemacs|org-emphasize spacemacs/org-underline ?_)
                     ;; "xv" (spacemacs|org-emphasize spacemacs/org-verbatim ?=) )
                     ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer 3
    :pin org
    :mode "\\.org\'"
    :config
    (progn
      (js/org-keybindings)
      (setq org-src-tab-acts-natively t
            org-src-fontify-natively t
            org-directory "~/org"
            org-default-notes-file (expand-file-name "notes.org" org-directory))
      (setq org-todo-keywords '((sequence "☛ TODO(t)" "|" "✔ DONE(d)")
                                (sequence "⚑ WAITING(w)" "|")
                                (sequence "|" "✘ CANCELED(c)")))))

#+END_SRC


Generate Table of Contents generation in org-mode.

#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :custom
    (toc-org-max-depth 10)
    :hook (org-mode . toc-org-enable))
#+END_SRC

Add project support to track TODOs per project.

#+BEGIN_SRC emacs-lisp
  (use-package org-projectile
    :hook (projectile-before-switch-project-hook . org-projectile-per-project)
    :config
    (progn
      (setq org-projectile-per-project-filepath "TODO.org"
            setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
      (global-keymap
       "pc" 'org-projectile-projectile-project-todo-completing-read)))
#+END_SRC

Add special keybindings to org mode that work well with evil mode.

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :hook (org-mode . evil-org-mode)
    :custom
    (evil-org-use-additional-insert t)
    (evil-org-key-theme '(textobjects
                          navigation
                          additional
                          todo)))
#+END_SRC

*** PDF

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    (keymap-for-mode 'pdf-view
                     ;; Slicing image
                     "sm" 'pdf-view-set-slice-using-mouse
                     "sb" 'pdf-view-set-slice-from-bounding-box
                     "sr" 'pdf-view-reset-slice
                     ;; Annotations
                     "a" '(:ignore t :which-key "annotations")
                     "aD" 'pdf-annot-delete
                     "at"	'pdf-annot-attachment-dired
                     "ah"	'pdf-annot-add-highlight-markup-annotation
                     "al"	'pdf-annot-list-annotations
                     "am"	'pdf-annot-add-markup-annotation
                     "ao"	'pdf-annot-add-strikeout-markup-annotation
                     "as"	'pdf-annot-add-squiggly-markup-annotation
                     "at"	'pdf-annot-add-text-annotation
                     "au"	'pdf-annot-add-underline-markup-annotation
                     ;; Fit image to window
                     "f" '(:ignore t :which-key "fit")
                     "fw" 'pdf-view-fit-width-to-window
                     "fh" 'pdf-view-fit-height-to-window
                     "fp" 'pdf-view-fit-page-to-window
                     ;; Other
                     "s" '(:ignore t :which-key "slice/search")
                     "ss" 'pdf-occur
                     "p" 'pdf-misc-print-document
                     "O" 'pdf-outline
                     "n" 'pdf-view-midnight-minor-mode))
  #+END_SRC

** Apps
*** Riot / Matrix client

This package is currently disabled. I am not able to log in successfully.

#+BEGIN_SRC emacs-lisp
  (use-package matrix-client
    :disabled ;; not ready for prime time yet
    :quelpa (matrix-client :fetcher github
                           :repo "jgkamat/matrix-client-el"))
#+END_SRC
